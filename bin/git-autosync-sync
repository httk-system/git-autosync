#!/bin/bash

set -e

if [ -z "$1" ]; then
    REPO="."
else
    REPO=$1
fi

cd "$REPO"
if [ ! -e .git ]; then
    echo "Not a git repo"
    exit 1
fi

REPODIR=$(git rev-parse --show-toplevel)
REPONAME=$(basename "$REPODIR")
cd "$REPODIR"

if [ ! -e ~/".git-autosync/worktrees/$REPONAME/" ]; then
    echo "Missing git autosync worktree in: $REPODIR"
    exit 1
fi

GIT=$(cat ~/".git-autosync/worktrees/$REPONAME/.git")
export GIT_DIR="${GIT#*: }"

# Make sure we have files from the right branch staged in case we happen to run this during a branch switch
git add -A
LOCAL_BRANCH=$(git rev-parse --abbrev-ref main-worktree/HEAD)
sleep 1
while [ -n "$(git diff --quiet --cached)" -o "$LOCAL_BRANCH" != "$(git rev-parse --abbrev-ref main-worktree/HEAD)" ]; do
    echo "Note: files or branch changing while working; updating."
    git add -A
    LOCAL_BRANCH=$(git rev-parse --abbrev-ref main-worktree/HEAD)
    sleep 1
done

BRANCH="git-autosync-$(hostname)"

if [ -n "$(git diff --name-only --cached)" ]; then
    echo "Git-autosync commiting: $REPONAME"
    git commit -m "git-autosync commit ${REPONAME} $(hostname) ${LOCAL_BRANCH} $(date -R)" --no-gpg-sign
fi

git merge main-worktree/HEAD --no-ff --no-gpg-sign -m "git-autosync merge ${REPONAME} $(hostname) ${LOCAL_BRANCH} $(date -R)"

if ! git show-branch "git-autosync/git-autosync-$(hostname)" >& /dev/null; then
    PUSH_COMMAND="git push --set-upstream git-autosync \"git-autosync-$(hostname)\" --follow-tags"
    PUSH=yes
else
    PUSH_COMMAND="git push --follow-tags"
    PUSH="$(git cherry | head -n 1)"
fi

if [ -n "$PUSH" ]; then
    SSH_COMMAND="$(git config git-autosync.sshCommand || true)"
    if [ -n "$SSH_COMMAND" ]; then
        GIT_SSH_COMMAND="$SSH_COMMAND" eval "${PUSH_COMMAND}"
    else
        eval "${PUSH_COMMAND}"
    fi
fi
