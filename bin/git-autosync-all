#!/bin/bash

set -e

if [ "$#" -lt "1" ]; then
    echo "Usage: $0 <remote path>"
    echo
    echo "  Give <remote path>, e.g., user@example.com:path/to/repos to find all git repos under that path"
    echo "  and clone them under the present path. When doing this, the command also searches through the"
    echo "  current working directory, and if there are already cloned matching repositories, they are"
    echo "  moved into place to match the remote directory structure."
    exit 1
fi

REMOTE="$1"
RHOST="${REMOTE%:*}"
RPATH="${REMOTE##*:}"

echo "RHOST: $RHOST"
echo "RPATH: $RPATH"

if [ ! -e ./.git-autosync-root ]; then
    echo ""
    echo "As a saftey feature, git-autosync-all requires the file .git-autosync-root"
    echo "to exist in both the source and destination directories it operates on."
    echo "This ensures it is not accidentally invoked on the wrong directoires"
    echo ""
    echo "The local .git-autosync-root file is missing."
    echo ""
    echo "Verify that you are in the right directory, create an empty .git-autosync-root, and try again."
    echo ""
    exit 1
fi

GIT_IDS=$(find . -type d -name ".git" -prune | while read LINE; do
              (
                  cd "${LINE}"
                  if [ -e "${LINE}/.gituuid" ]; then
                      ID="$(cat "${LINE}/.gituuid")"
                  else
                      ID="$(git rev-list --parents HEAD | tail -1)"
                  fi
                  echo "$ID" "$LINE"
              )
done)

GIT_SRC_IDS=$(ssh "$RHOST" bash -c 'echo cd "'"$RPATH"'"; cd "'"$RPATH"'"; if [ ! -e ./.git-autosync-repos-root ]; then echo "SAFTEY CHECK FAIL"; exit 0; fi; find . -type d -name ".git" -prune | while read LINE; do
              (
                  echo "PROCESSING ${LINE}" >&2
                  cd "${LINE}"
                  if [ -e "${LINE}/.gituuid" ]; then
                      ID="$(cat "${LINE}/.gituuid")"
                  else
                      ID="$(git rev-list --parents HEAD | tail -1)"
                  fi
                  REPO=$(basename $LINE .git)
                  echo "$ID" "$REPO"
              )
done')

if grep -q '^SAFTEY CHECK FAIL$' <<< "$GIT_MOVE_COMMANDS"; then
    echo ""
    echo "As a saftey feature, git-autosync-all requires specific hidden files"
    echo "to exist in both the source and destination directories it operates on."
    echo "This ensures it is not accidentally invoked on the wrong directoires"
    echo ""
    echo "The remote .git-autosync-repos-root file is missing."
    echo ""
    echo "Verify that you giving the right remote path, login on that server and create an empty .git-autosync-root, and try again."
    echo ""
    exit 1
fi

echo "---"
echo "$GIT_IDS"
echo "---"
echo "$GIT_SRC_IDS"
echo "---"

while IFS= read -r LINE; do
    ID=$(cut -d ' ' -f1)
    LPATH=$(cut -d ' ' -f2-)
    MATCH=$(grep "$ID" <<< "$GIT_SRC_IDS" | cut -d' ' -f2-);
    if [ -z "$MATCH" ]; then
        echo mv "$LPATH" "Trash"
    else
        echo mv "$LPATH" "MATCH"
    fi
done <<< "$GIT_IDS"

echo "Work in progress"
exit 0

REPO=$1
if [ -z "$2" ]; then
    SYNC_REPO=$1
else
    SYNC_REPO=$2
fi
if [ -z "$3" ]; then
    BRANCH="git-autosync-$(hostname)"
else
    BRANCH="$3"
fi
if [ -z "$4" ]; then
    REPONAME=$(basename "$REPO" .git)
    DEST="./$REPONAME"
else
    DEST="$4"
    REPONAME=$(basename "$DEST")
fi

if [ ! -e "$REPONAME" ]; then
    git clone "$REPO" "$DEST"
fi
cd "$DEST"

if ! git rev-parse HEAD >& /dev/null; then
    echo "== Cloned repository is empty, creating and pushing empty initial commit."
    git branch -m main
    git commit -m "Initial commit" --allow-empty
    git push --set-upstream origin main
fi

if ! git remote get-url git-autosync >& /dev/null; then
    git remote add git-autosync "$SYNC_REPO"
fi

if [ ! -e ~/.git-autosync/worktrees ]; then
    mkdir -p ~/.git-autosync/worktrees
fi
if [ ! -e ~/".git-autosync/worktrees/$REPONAME/" ]; then
    git worktree add ~/".git-autosync/worktrees/$REPONAME/" -b "$BRANCH" --no-checkout
fi
