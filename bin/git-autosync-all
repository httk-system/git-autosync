#!/bin/bash

set -e

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)

if [ "$#" -lt "1" ]; then
    echo "Usage: $0 <remote path>"
    echo
    echo "  Give <remote path>, e.g., user@example.com:path/to/repos to find all git repos under that path"
    echo "  and clone them under the present path. When doing this, the command also searches through the"
    echo "  current working directory, and if there are already cloned matching repositories, they are"
    echo "  moved into place to match the remote directory structure."
    exit 1
fi

REMOTE="$1"
RHOST="${REMOTE%:*}"
RPATH="${REMOTE##*:}"

if [ ! -e ./.git-autosync-root ]; then
    echo ""
    echo "As a saftey feature, git-autosync-all requires specific hidden files"
    echo "to exist in both the source and destination directories it operates on."
    echo "This ensures it is not accidentally invoked on the wrong directoires"
    echo ""
    echo "The local .git-autosync-root file is missing."
    echo ""
    echo "Verify that you are in the right directory, create an empty .git-autosync-root, and try again."
    echo ""
    exit 1
fi

GIT_IDS=$(find . -type d -name ".git" -prune | while read LINE; do
              if [ -e "${LINE}/.gituuid" ]; then
                  ID="$(cat "${LINE}/.gituuid")"
              else
                  ID="$(git --git-dir "${LINE}" rev-list --parents HEAD | tail -1)"
              fi
              LPATH="$(dirname "$LINE")"
              echo "$ID" "${LPATH#./}"
          done)

GIT_SRC_IDS=$(ssh "$RHOST" bash -c 'true; set -e; cd "'"$RPATH"'"; if [ ! -e ./.git-autosync-repos-root ]; then echo "SAFTEY CHECK FAIL"; exit 0; fi; find . -type d -name "*.git" -prune | while read LINE; do
                  if git --git-dir "${LINE}" show HEAD:.gituuid >& /dev/null; then
                      ID="$(git --git-dir "${LINE}" show HEAD:.gituuid)"
                  else
                      ID="$(git --git-dir "${LINE}" rev-list --parents HEAD | tail -1)"
                  fi
                  RPATH="${LINE%.git}"
                  echo "$ID" "${RPATH#./}"
done')

if grep -q '^SAFTEY CHECK FAIL$' <<< "$GIT_MOVE_COMMANDS"; then
    echo ""
    echo "As a saftey feature, git-autosync-all requires specific hidden files"
    echo "to exist in both the source and destination directories it operates on."
    echo "This ensures it is not accidentally invoked on the wrong directoires"
    echo ""
    echo "The remote .git-autosync-repos-root file is missing."
    echo ""
    echo "Verify that you giving the right remote path, login on that server and create an empty .git-autosync-root, and try again."
    echo ""
    exit 1
fi

echo
echo "--- LOCAL REPO IDS ---"
echo "$GIT_IDS"
echo "---"
echo
echo "--- REMOTE REPO IDS ---"
echo "$GIT_SRC_IDS"
echo "---"
echo

CONFIRM_MOVE() {
    read -u 3 -p "== Confirm move $1 -> $2 [y/n]?: " CONFIRM
    if [ "$CONFIRM" != "y" ]; then
        echo "User stop." >&2
        exit 1
    else
        DIRNAME=$(dirname "$2")
        mkdir -p "$DIRNAME"
        mv "$1" "$2"
    fi
}

exec 3<&0
while IFS= read -r LINE; do
    ID=$(cut -d ' ' -f1 <<< "$LINE")
    LPATH=$(cut -d ' ' -f2- <<< "$LINE")
    MATCH=$(grep "$ID" <<< "$GIT_SRC_IDS" | cut -d' ' -f2-);
    if [ -n "$MATCH" ]; then
        if [ -e "$MATCH" ]; then
            DEST_ID=$(if [ -e "${LPATH}/.gituuid" ]; then echo "$(cat "${LPATH}/.gituuid")"; else echo "$(git --git-dir "$LPATH/.git" rev-list --parents HEAD | tail -1)"; fi)
            if [ "$DEST_ID" == "$ID" ]; then
                echo "== Repo already in place: $LPATH"
            else
                echo "TWO"
                CONFIRM_MOVE "$MATCH" "Trash/$(basename "$MATCH").$RANDOM"
                if [ -e "${LPATH}.disabled" ]; then
                    echo "THREE"
                    CONFIRM_MOVE "$LPATH" "Trash/$(basename "$LPATH").$RANDOM"
                else
                    CONFIRM_MOVE "$LPATH" "$MATCH"
                fi
            fi
        else
            if [ -e "${LPATH}.disabled" ]; then
                echo "FOUR"
                CONFIRM_MOVE "$LPATH" "Trash/$(basename "$LPATH").$RANDOM"
            else
                CONFIRM_MOVE "$LPATH" "$MATCH"
            fi
        fi
    else
        echo "FIVE"
        CONFIRM_MOVE "$LPATH" "Trash/$(basename "$LPATH").$RANDOM"
    fi
done <<< "$GIT_IDS"

CONFIRM_SETURL() {
    read -u 3 -p "== Confirm set-url on '$1' branch '$2' to '$3' [y/n]?: " CONFIRM
    if [ "$CONFIRM" != "y" ]; then
        echo "Remote left alone." >&2
    else
        git --git-dir "$1/.git" remote set-url "$2" "$3"
    fi
}

CONFIRM_CLONE() {
    read -u 3 -p "== Confirm clone '$1' into '$2' [y/n]?: " CONFIRM
    if [ "$CONFIRM" != "y" ]; then
        echo "Clone skipped." >&2
    else
        "${SCRIPT_DIR}"/git-autosync-clone "${1}" "" "" "${2}"
    fi
}

while IFS= read -r LINE; do
    ID=$(cut -d ' ' -f1 <<< "$LINE")
    LPATH=$(cut -d ' ' -f2- <<< "$LINE")
    if [ -e "$LPATH" ]; then
        DEST_ID=$(if [ -e "${LPATH}/.gituuid" ]; then echo "$(cat "${LPATH}/.gituuid")"; else echo "$(git --git-dir "$LPATH/.git" rev-list --parents HEAD | tail -1)"; fi)
        if [ "$DEST_ID" == "$ID" ]; then
            ORIGIN=$(git --git-dir "$LPATH/.git" remote get-url origin)
            if [ "${ORIGIN#$REMOTE}" != "${ORIGIN}" ]; then
                CONFIRM_SETURL "$LPATH" origin "${REMOTE}/${LPATH}"
            fi
            AUTOSYNC=$(git --git-dir "$LPATH/.git" remote get-url git-autosync)
            if [ "${AUTOSYNC#$REMOTE}" != "${AUTOSYNC}" ]; then
                CONFIRM_SETURL "$LPATH" git-autosync "${REMOTE}/${LPATH}"
            fi
        else
            echo "Unexpected path error. The path:"
            echo "  $LPATH"
            echo "Contains a repo that does not match the destination repo, yet it was not moved away."
            exit 1
        fi
    else
        if [ -e "${LPATH}.disabled" ]; then
            CONFIRM_CLONE "${REMOTE}/${LPATH}" "${LPATH}"
        fi
    fi
done <<< "$GIT_SRC_IDS"
