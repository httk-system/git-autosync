if [ "$CONNSHARE_SETUP_DONE" != "1" ]; then

  setup_cloud_connshare() {

    RHOST="$1"
    CONNSHARE="$2"

    if [ "$CONNSHARE" == "auto" -o "$CONNSHARE" == "ask" ]; then

      echo "== Setting up ssh connection sharing to: ${RHOST}"

      if ssh -S "${GIT_CLOUD_SSHDIR}/%C.cs.socket" -O check "$RHOST" >& /dev/null; then
          echo "Info: connection sharing already active."
          return
      fi

      if [ "$CONNSHARE" == "auto" ]; then
          ssh -M -S "${GIT_CLOUD_SSHDIR}/%C.cs.socket" -o "ControlPersist=2h" "$RHOST" true
      else
          ssh -MM -S "${GIT_CLOUD_SSHDIR}/%C.cs.socket" -o "ControlPersist=2h" "$RHOST" true
      fi

      if ! ssh -S "${GIT_CLOUD_SSHDIR}/%C.cs.socket" -O check "$RHOST" >& /dev/null; then
          echo "Error: failed to open ssh connection with connection sharing to $RHOST"
          return
      fi
    fi
  }

  # There is no way to get GIT_SSH_COMMAND to work if quotes are needed
  # export GIT_SSH_COMMAND="ssh -S ${GIT_CLOUD_SSHDIR}/%C.cs.socket"
  # I think this is the only way to be absolutely safe:
  if [ -n "$GIT_SSH_COMMAND" ]; then
    echo -e "#!/bin/bash\nexec $GIT_SSH_COMMAND -S \"${GIT_CLOUD_SSHDIR}/%C.cs.socket\" \"\$@\"" > "${GIT_CLOUD_SSHDIR}/sshwrapper"
  elif [ -n "$GIT_SSH" ]; then
      echo -e "#!/bin/bash\nexec \"$GIT_SSH\" -S \"${GIT_CLOUD_SSHDIR}/%C.cs.socket\" \"\$@\"" > "${GIT_CLOUD_SSHDIR}/sshwrapper"
  else
      echo -e "#!/bin/bash\nexec ssh -S \"${GIT_CLOUD_SSHDIR}/%C.cs.socket\" \"\$@\"" > "${GIT_CLOUD_SSHDIR}/sshwrapper"
  fi
  chmod +x "${GIT_CLOUD_SSHDIR}/sshwrapper"
  export GIT_SSH="${GIT_CLOUD_SSHDIR}/sshwrapper"
  unset GIT_SSH_COMMAND

  function trap_exit {
        echo
        echo "== (Don't) Cleaning up ssh connection sharing sockets"
        #for SOCKET in "${GIT_CLOUD_SSHDIR}"/*.cs.socket; do
        #    if [ "$SOCKET" == "${GIT_CLOUD_SSHDIR}/*.cs.socket" ]; then
        #        break
        #    fi
        #    ssh -O exit -S "${SOCKET}" dummy >& /dev/null
        #    rm -f "${SOCKET}"
        #done
  }
  trap trap_exit EXIT

  trap_ctrlc() {
    kill -HUP $$
  }
  trap trap_ctrlc INT

  export -f setup_cloud_connshare
  export CONNSHARE_SETUP_DONE=1
fi

find "$GIT_CLOUD_SSHDIR" -name "*.cs" | while read CONNFILE; do
  REMOTE=$(basename "$CONNFILE" .cs)
  if [ -n "$REMOTE" ]; then
      setup_cloud_connshare "$REMOTE" "$GIT_CLOUD_CONNSHARE"
  fi
done
